<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="utf-8">
        <title>Jeu</title>
        <style media="screen and (min-width: 1000px)">
			body
			{
				height: 98vh;
				width: 98vw;
				font-size: 1vw;
				font-family: Verdana;
				overflow-x: hidden;
				overflow-y: auto;
				-webkit-user-select: none; /* Safari */        
				-moz-user-select: none; /* Firefox */
				-ms-user-select: none; /* IE10+/Edge */
				user-select: none; /* Standard */
				background-repeat: x;
			}
			#main_box
			{
				width: 60%;
				margin-left: auto;
				margin-right: auto;
				margin-bottom: 1%;
				display: flex;
				height: 75%;
				

			}
			#plateau
			{
				width: 80%;
				border: 0.1vw solid grey;
				background-color: #c24f54;
				

				
			}
			.carte
			{
				border: 0.1vw solid black;
				text-align: center;
				background-color: #ffffff;
				color: #11323b;
				border-radius: 0.5vw;
				height: auto;
				width: 7.55vw;
				height: 12.89vw;
				word-wrap: normal;
			}
			.carte header h1, #question header h1
			{
				border-bottom: 0.1vw solid black;
				border-radius: 0.5vw;
				width: 100%;
				height: 10%;
				margin: 0%;
				font-size: 1vw;
				background-color: #6a9fab;
				color: white;
			}
			.carte .content
			{
				padding: 1%;
			}
			.vide
			{
				background-color: #e7e7e7;
				
			}
			#carte_question
			{
				visibility: collapse;
				display:none;
			}
			.vide header h1 
			{
				background-color: #a3d5e0;
			}
			#top_plateau
			{
				width: 70%;
				margin-right: auto;
				margin-left: auto;
				margin: 1% auto;
				height: 38%;
				border-bottom: 0.1vw dotted black;

			}
			#question
			{
				width: auto;
				height: 75%;
				margin: auto;
				background-color: #184751;
				color: white;
				font-size: 1.2vw;
				border: 0.1vw solid black;
				text-align: center;
				border-radius: 0.5vw;
				word-wrap: normal;
			}
			#text_question
			{
				height:88%;
				overflow-y:auto;
				display:flex;
				margin-top:-1%;
			}
			#text_question p 
			{
				text-align: center;
				margin: auto;
			}
			#top_plateau span.balise
			{
				font-size: 2vw;
				color: rgb(255, 255, 0);
			}
			/*
			#top_plateau span.balise:hover
			{
				font-size: 3vw;
				color: yellow;
			}
			*/
			#bottom_plateau
			{
				display: flex;
				flex-wrap: wrap;
				margin: 3% auto;
				justify-content: center;
				align-items: center;
				width: 100%;
				height: 50%;
				
			}
			#bottom_plateau .carte
			{
				
				height: auto;
				margin-left: 2%;
				margin-right: 2%;
				width: 16%;
				height: 70%;

			}
			#score
			{
				width : 18%;
				border: 0.1vw solid grey;
				margin-left: 1%;	
				text-align: center;
				color: #11323b;
				background-color: #c24f54;
				

			}
			#score header
			{
				border-bottom: 0.1vw solid black;
				height:10%
			}
			#btn_launch
			{
			    width: 9vw;
				font-size: 1vw;
				height: 2.5vw;
				font-family: verdana;
				color: white;
				border: 1px solid white;
				border-radius: 5px;
				background-color: #6a9fab;
			}
			#btn_launch:disabled
			{
				background-color:#e7e7e7;
			}
			#score #content
			{
				font-size: 1vw;
				overflow-y:auto;
				height:65%;
			}
			#commands
			{
				height:25%
			}
			#score #content div:hover
			{
				color: white;
				border: 0.1vw dotted white;
				border-radius: 0.5vw;
				padding: 0%;
			}
			.div_player > * {
				 pointer-events: none;
			}
			.carte > * {
				 pointer-events: none;
			}
			#score #content div:active
			{
				color: white;
				border: 0.1vw dotted white;
				border-radius: 0.5vw;
				padding: 0%;
			}
			#score #content p
			{
				margin: 2%;
			}
			#score p.vote
			{
				font-size: 0.7vw;
				margin: 0%;
			}
			#score #commands > p
			{
				color: white;
				font-size: 1.1vw;
			}
			#main
			{
				display: flex;
				justify-content: center;
				flex-wrap: wrap;
				-ms-flex: 1; /* IE 10 */
				flex: 1;
				align-items: self-end;
				
			}
			#main .carte
			{
				margin-left: 0.08%;
				margin-right: 0.08%;
				height: 29vh;
				width: 8%
			}
		</style>
		<style media="screen and (max-width: 1000px)">
		
			document
			{
				overflow: hidden;
			}
			body
			{
				height: 98vh;
				width: 98vw;
				font-size: 1.7vh;
				font-family: Verdana;
				overflow-x: hidden;
				overflow-y: auto;
				-webkit-user-select: none; /* Safari */        
				-moz-user-select: none; /* Firefox */
				-ms-user-select: none; /* IE10+/Edge */
				user-select: none; /* Standard */
				background-repeat: x;

			}
			#main_box
			{
				width: 100%;
				margin-left: auto;
				margin-right: auto;
				margin-bottom: 1%;
				display: flex;
				height: 55%;
				

			}
			#plateau
			{
				width: 70%;
				border: 0.1vw solid grey;
				background-color: #c24f54;


				
			}
			.carte
			{
				border: 0.1vh solid black;
				text-align: center;
				background-color: #ffffff;
				color: #11323b;
				border-radius: 0.5vh;
				height: auto;
				width: 14.8vh;
				height: 11.9vh;
				word-wrap: normal;
				
			}

			.carte header h1, #question header h1
			{
				border-bottom: 0.1vw solid black;
				border-radius: 0.5vw;
				width: 100%;
				height: 10%;
				margin: 0%;
				font-size: 2vh;
				background-color: #6a9fab;
				color: white;
			}
			.carte .content
			{
				padding: 1%;
			}
			.vide
			{
				background-color: #e7e7e7;
				
			}
			#carte_question
			{
				visibility: collapse;
				display: none;
			}
			.vide header h1 
			{
				background-color: #a3d5e0;
			}
			#top_plateau
			{
				width: 90%;
				margin-right: auto;
				margin-left: auto;
				margin: 1% auto;
				height: 50%;
				border-bottom: 0.1vh dotted black;

			}
			#question
			{
				width: auto;
				height: 100%;
				margin: auto;
				background-color: #184751;
				color: white;
				font-size: 2.5vh;
				border: 0.1vh solid black;
				text-align: center;
				border-radius: 0.5vh;
				word-wrap: normal;
			}
			#question header 
			{
				
			}
			#question #text_question
			{
				display:flex;
				height:91%;
				overflow-y:auto;
			}
			#top_plateau span.balise
			{
				font-size: 4vh;
				color: rgb(255, 255, 0);
			}
			#question p
			{
				margin:auto;
				text-align:center;
			}
			#bottom_plateau
			{
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				align-items: center;
				width: 100%;
				height: 40%;
				
			}
			#bottom_plateau .carte
			{
				
				height: auto;
				width: 45%;
				margin: 1%;
				height: 55%;
			}
			#score
			{
				width : 30%;
				border: 0.1vw solid grey;
				margin-left: 1%;	
				text-align: center;
				color: #11323b;
				background-color: #c24f54;

			}
			#score header
			{
				border-bottom: 0.1vh solid black;
				height: 10%;
			}
			#score header h1
			{
				color: white;
				font-size: 3vh;
				margin: 0px;
			}
			#score #content
			{
				font-size: 1.7vh;
				overflow-y: auto;
				height:65%;
			}
			#score #commands
			{
				height:25%;
			}
			#score #content div:hover
			{
				color: white;
				border: 0.1vh dotted white;
				border-radius: 0.5vh;
				padding: 0%;
			}
			#score #content div:active
			{
				color: white;
				border: 0.1vh dotted white;
				border-radius: 0.5vh;
				padding: 0%;
			}
			#score #content p
			{
				margin: 3%;
				
			}
			#score p.vote
			{
				font-size: 1.3vh;
				margin: 0px;
			}
			#score #commands > p
			{
				color: white;
				margin-bottom: 0.8vh;
				font-size: 1.9vh;
			}
			#btn_launch
			{
			    width:85%;
				font-size: 1.8vh;
				height:35%;
				font-family: verdana;
				color: white;
				border: 1px solid white;
				border-radius: 5px;
				background-color: #6a9fab;
			}
			#btn_launch:disabled
			{
				background-color: #e7e7e7;
			}
			.div_player > * {
				 pointer-events: none;
			}
			.carte > * {
				 pointer-events: none;
			}

			#main
			{
				display: flex;
				justify-content: center;
				flex-wrap: wrap;
				-ms-flex: 1; /* IE 10 */
				flex: 1;
				align-items: self-end;
			}
			#main .content p
			{
				width: auto;
				height: auto;
				margin: 0%;
				padding: 0%;
				font-size: 1.7vh;
			}
			#main .carte
			{
				width: 30%;
				margin-left: 1%;
				margin-right: 1%;
				margin-bottom: 1%; 
				height: 14vh;
				
			}
		</style>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	</head>
	
	
<body>

	<div id="main_box">

		<div id="plateau">
			<div id="top_plateau">
				<div id="question">
					<header>
						<h1>Question</h1>
					</header>
					<div id="text_question">
						<p></p>
					</div>
				</div>
			</div>
			<div id="bottom_plateau">
				<div id="carte_question" class="carte joue vide">
					<header>
						<h1>Carte 1</h1>
					</header>
					<div class="content">
						<p>Placez une carte dans un trou.</p>
					</div>
				</div>
				
			</div>
				
		</div>
		
		<aside id="score">
			<header>
				<h1>Score</h1>
			</header>
			<div id="content">
				

			</div>
			<div id="commands">
			<p><span id="titre_phase">Salle d'attente</span><span id="timer"></span></p>
			<button id="btn_launch" onclick="askLaunch()">Commencer la partie</button>
			</div>

		</aside>
	</div>
	
	<div id="main">
			<div class="carte" style='display:none;'>
				<header>
					<h1></h1>
				</header>
				<div class="content">
					<p></p>
				</div>
			</div>
				
				

	</div>

	
	

</body>

<script>
			
			dragObj=undefined;
			oldObj=undefined;
			balise=undefined;
			player = {};
			const url = document.location.href;
			player_list =[];
			timer=null;
			timerClick=null;
			vote_for=false;
			objScroll=null;
			mode=undefined;
			var scroll=true;
			mobile=false;
			selectedPlayer={id:undefined,count:0};
			const width  = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
			const height = window.innerHeight|| document.documentElement.clientHeight|| document.body.clientHeight;

			if (window.matchMedia('(min-width: 1000px)').matches) {
				size = ["1.2vw","1.3vw","2vw","2.1vw"];
			} else if (window.matchMedia('(max-width: 1000px)').matches) {
				mobile=true;
				size = ["2.5vh","2.6vh","4vh","4.1vh"];
			}

			window.parent.document.title = "Noir dormir pastèque";
			

			document.addEventListener('mousemove', DnDMove);
			document.addEventListener('touchmove', listener, {passive:false});			
			document.addEventListener("mouseup", clickEnd);


			function initQuestion(question) {
				plateau=document.getElementById("bottom_plateau");
				while (plateau.children.length > 1) {
					plateau.removeChild(plateau.lastChild);
				}
				count=0;
				while (question.search(/(?!>)□(?!<)/) > -1 ) {
					question = question.replace(/(?!>)□(?!<)/,"<span class='balise' id='balise_"+count.toString()+"'>□</span>");
					newCarte=document.getElementById("carte_question").cloneNode(true);
					newCarte.id="carte_"+count.toString();
					newCarte.style.visibility="visible";
					newCarte.querySelector("h1").innerHTML="Carte "+(count+1).toString();
					document.getElementById("bottom_plateau").appendChild(newCarte);
					count+=1;
				}
				document.querySelector("#text_question > p").innerHTML = question;
			}

			function getText(obj) {
				if (obj.textContent) { // « textContent » existe ? Alors on s'en sert !
						txt = obj.textContent;
				} else if (obj.innerText) { // « innerText » existe ? Alors on doit être sous IE.
					txt = obj.innerText + ' [via Internet Explorer]';
				} else { // Si aucun des deux n'existe, cela est sûrement dû au fait qu'il n'y a pas de texte
					txt = ''; // On met une chaîne de caractères vide
				}
				return txt;
			}
			
			function clickStart(e) {
				if (!e.isTrusted) {
					timerClick = setTimeout(initDnD,200);
					objScroll=e.currentTarget;
				} else {
					objScroll=e.currentTarget;
					initDnD();
				}
			}
			
			function clickEnd(e) {
				clearTimeout(timerClick);
				endDnD(e);
				scroll=true;
				
			}
			
			function listener(e) {
				if (! scroll) {
					e.preventDefault();
					
				} 
			}

			
			function initDnD() {
				if (mode=="PLAY") {
					scroll=false;
					var x = objScroll.offsetLeft;
					var y = objScroll.offsetTop;
					dragObj=objScroll.cloneNode(true);
					objScroll.style.visibility = "hidden"; 
					oldObj=objScroll;
					dragObj.style.position="absolute";
					dragObj.style.left=String(x)+"px";
					dragObj.style.top=String(y)+"px";
					document.body.addEventListener('mouseup', clickEnd);
					document.body.appendChild(dragObj);
					
				}
			}



			function DnDMove(e) {
				clearTimeout(timerClick);
				if (dragObj != undefined) {
					dragObj.style.left=String(e.clientX)+"px";
					dragObj.style.top=String(e.clientY)+"px";
				}
				var x = e.clientX, y = e.clientY;
				

				if (!(x>width || y>height || x<0 || y<0)) { //si on est toujours dans la fenêtre
					var el=document.elementFromPoint(x,y);
					baliseHover(el); //si on entre sur la balise, 
				}
				else { //cas où on sort de la fenêtre 
					endDnD(e);
					console.log("sortie de l fenetre : ",x,y,width,height);
				}
				
			}


			function baliseHover(el, force = false) {
				if (el && (el.innerText=="□" || (balise && balise.innerText=="□"))) { //On gère le hover lorsque les balises sont vides
					if (balise && el.id != balise.id){ //cas où on sort de la balise 
						if (balise.innerText != "□") { balise.style.fontSize = size[0]; } else {balise.style.fontSize = size[2];} //cas particulier où l'on vient d'une balise non vide
						if (el.className=="balise") { //si on réentre dans l'autre balise. 
							balise = el;
							baliseHover(el);
							return
						 }
						 else {
							balise = undefined;
						 }
					}
					else if (!balise && el.className=="balise") { //cas où on entre dans une balise 
						balise = el;
						balise.style.fontSize = size[3];	
					}
					
					
				}
				else if (balise && el.className=="balise" && balise.id  != el.id){ //cas où on sort d'une balise pour entrer dans une autre
					balise.style.color="white";
					balise.style.fontSize = size[0];
					balise = undefined;
					baliseHover(el);
					}
				else if (el && (el.className=="balise" && force == false)) { //si l'élémnt parcouru est une balise et que force est faux
					balise = el;
					if (getComputedStyle(balise).color != "rgb(255, 255, 0)") { //si on est pas déjà entré sur l'objet
						balise.style.color="rgb(255, 255, 0)";
						balise.style.fontSize = size[1];
					}
				}
				else if (balise && getComputedStyle(balise).color == "rgb(255, 255, 0)") { //deux cas : fin du DnD & la balise identifiée est jaune 																							//OU sortie de la balise
					balise.style.color="white";
					if (force == false) {balise.style.fontSize = size[0];} //cas où on termine le DnD
					balise = undefined;
				}
			}

			function insertCard(balise,card,vote) {
				if (balise.innerHTML!="□") {
					addCard(balise.innerText);
				}
				else {
					balise.style.backgroundColor="#6a9fab";
				}
				contenu=card.querySelector("p").innerHTML;
				if (balise.parentNode.childNodes[0] == balise) {balise.innerHTML=contenu;}
				else {balise.innerHTML=contenu.toLowerCase();}
				balise.style.fontSize=getComputedStyle(balise.parentNode).fontSize;
				id="carte_"+balise.id.split("_").at(-1);
				document.getElementById(id).className="carte";
				document.getElementById(id).querySelector("p").innerHTML=contenu;
				document.getElementById(id).addEventListener("mousedown",removeCard);
				player.cards_played[parseInt(id.split("_").at(-1))]=contenu.toLowerCase();
				balise.addEventListener("mousedown",removeCard);
			}
			function addCard(text) {
				new_card=document.getElementById("main").children[0].cloneNode(true);
				text=text.charAt(0).toUpperCase() + text.slice(1);
				new_card.querySelector("p").innerHTML=text;
				new_card.querySelector("h1").innerHTML=player.name;
				new_card.style.visibility="visible";
				new_card.style.display="block";
				document.getElementById("main").appendChild(new_card);
				new_card.addEventListener('mousedown', clickStart);
				
			}
			function removeCard(e) {
				el=document.elementFromPoint(e.clientX,e.clientY);
				if (el.id.split("_")[0] == "carte") {
					balise = document.getElementById("balise_"+el.id.split("_")[1]);
				}
				if (balise && balise.innerText!="□" && mode == "PLAY") { 
					carte=document.getElementById("carte_"+balise.id.at(-1));
					carte.querySelector("p").innerText="Placez une carte dans un trou.";
					carte.className="carte joue vide";
					addCard(balise.innerText);
					balise.innerText="□";
					balise.style.fontSize=size[2];
					balise.style.backgroundColor="transparent";
					balise.style.color="rgb(255, 255, 0)";
					player.cards_played[parseInt(balise.id.split("_").at(-1))]=undefined;

				}				
			}

			function deleteCards() {
				let main =  document.getElementById("main");
				while (main.children.length > 1) {
					main.removeChild(main.lastChild);
				}
			}

			function endDnD(e) {
				
				if (mode== "PLAY" && dragObj != undefined) {
					oldObj.style.visibility = "visible";
					
					if (e) {
						el=document.elementFromPoint(e.clientX,e.clientY);
						if (el.id.split("_")[0] == "carte") 
						{
							balise = document.getElementById("balise_"+el.id.split("_")[1]);
						}
						if (balise) {
							insertCard(balise,oldObj);
							oldObj.parentNode.removeChild(oldObj);
							baliseHover(balise,true);
						}
					}
					

					document.body.removeChild(dragObj);
					document.body.removeEventListener('mouseup', endDnD);
					dragObj=undefined;
				}
				
			}

			function touchHandler(event) {
				var touch = event.changedTouches[0];
				var simulatedEvent = document.createEvent("MouseEvent");
					simulatedEvent.initMouseEvent({
					touchstart: "mousedown",
					touchmove: "mousemove",
					touchend: "mouseup"
				}[event.type], true, true, window, 1,
					touch.screenX, touch.screenY,
					touch.clientX, touch.clientY, false,
					false, false, false, 0, null);
				touch.target.dispatchEvent(simulatedEvent);
			}

			function updateScores() {
				content = document.querySelector("#score > #content");
				for (joueur of player_list) {
					if (content.querySelector("#player_"+joueur.id)) {
						content.querySelector("#points_"+joueur.id).innerText=joueur.score;
						content.querySelector("#nbr_votes_"+joueur.id).innerText=joueur.nbr_votes;
					} else {
						newDiv = document.createElement("div");
						newDiv.id="player_"+joueur.id;
						newDiv.className="div_player";
						newDiv.innerHTML=`
							<p><strong>`+joueur.name+`</strong> : <span id="points_`+joueur.id+`">`+joueur.score+`</span> points</p>
							<p class="vote" id="vote_`+joueur.id+`"><span id="nbr_votes_`+joueur.id+`">`+joueur.nbr_votes+`</span> vote(s)</p>
						`
						newDiv.addEventListener("mouseover", overPlayer);
						newDiv.addEventListener("mouseup", selectPlayer);
						content.appendChild(newDiv);
					}
				}
			}

			function findID(id) {
					for (i = 0; i < player_list.length; i++){
						if (player_list[i].id == id) {return i;}
					}
			}

			function overPlayer (e) {
				if (mode=="VOTE") {
					let i=findID(e.target.id.split("_").at(-1));
					let n=0;
					for (bal of document.querySelectorAll(".balise")) {
						let card = player_list[i].cards_played[n];
						if (!card) {
							card="□";
							bal.style.fontSize=size[2];
							bal.style.color="rgb(255, 255, 0)";
							bal.style.backgroundColor="transparent";
						} else {
							bal.style.fontSize=size[0];
							bal.style.color="rgb(255, 255, 0)";
							bal.style.backgroundColor="#6a9fab";
						}
						
						bal.innerText=card;
						
						n++;
					}
				}
			}

			function selectPlayer(e) {			
				if (e && mobile) {
					let id = e.target.id;
					if (selectedPlayer.id == id) {
						selectedPlayer.count++;
						if (selectedPlayer.count!=4) {
							return;
						}
					} else {
						selectedPlayer.count=1;
						selectedPlayer.id=id;
						return;
					}
				}
				if (vote_for) {
					div_player=document.getElementById("player_"+(vote_for));
					if (div_player) {
						for (let child of div_player.children) 
						{
							child.style.color="#11323b";
						}	
					}
				}
				if (mode=="VOTE") {
					let id=e.target.id.split("_").at(-1);
					vote_for=id;
					for (let child of document.getElementById("player_"+(vote_for)).children) 
					{
						child.style.color="rgb(255, 255, 0)";
					}
				}
			}

			function getsa(type="",) {
				$.get("http://localhost:3000/"+type, function (data, status){
					console.log(typeof(data));
					});
			}


			function register(pseudo) {

				$.post(url+"register_player",{name:pseudo}, function (data, status){
							if (status == "success") {
								player = data;
								
								window.parent.document.title = player.name;
							}
							
					});
						
			}

			function getQuestion() {
				$.post(url+"get_question",{id:player.id,password:player.password}, function (data, status){
					initQuestion(data.question);
					});
			}

			function quit(e) {
				e.preventDefault();
				$.post(url+"player_left",{id:player.id,password:player.password}, function (data, status){
							
							
					});
			}
			function deletePlayer() {
				content = document.querySelector("#score > #content");
				liste_id = player_list.map(function (el) {return el.id});
				for (let i = 0; i<content.children.length; i++) {
					if (!liste_id.includes(parseInt(content.children[i].id.split("_").at(-1)))) {
						content.removeChild(content.children[i]);
						i--;
					}
				}
				
			}
			function update() {
				$.post(url+"update",{id:player.id,password:player.password,vote_for:vote_for}, function (data, status){
					if (status == "success") {
							player_list=data.player_list;
							if (data.player) {
								for (up of data.player.updates) {
									if (up == "new_player") {
										updateScores();
									} else if (up == "player_left") {
										deletePlayer();
									} else if (up == "new_game") {
										deleteCards();
										player.cards = data.player.cards;
										for (card of player.cards) {
											addCard(card);
										}
									} else if (up == "new_round") {
										initQuestion(data.question);
										mode = "PLAY";
										document.getElementById("titre_phase").innerText="Phase de jeu";
										document.getElementById("btn_launch").disabled=true;
										document.getElementById("btn_launch").innerText="Voter";
										player.cards_played=[];
									} else if (up == "timer_start") {
										if (timer && timer.online == true) {updateTimer(true);}
										if (mode=="ROOM") {document.getElementById("btn_launch").disabled=true;}
										timer = data.timer;
										timer.id = setInterval(() => {
											updateTimer();
									},1000);
									} else if (up == "end_round") {
										if (timer.online) {updateTimer(true);}										
										endDnD();
										sendCards();
										mode = "VOTE";
									} else if (up == "start_vote") {
										mode="VOTE";
										document.getElementById("titre_phase").innerText="Phase de vote";
										document.getElementById("btn_launch").disabled=false;
									}
									else if (up == "end_vote") {
										mode="PLAY";
										selectPlayer(null);
										vote_for=false;
										selectedPlayer.id=undefined;
										selectedPlayer.count=0;
										updateScores();
									}
									
								}
							}
							if (mode == "VOTE") {
								updateScores();
							}
								
						}		
					});
			}
			function updateTimer(end) {
				timer.time--;
				document.getElementById("timer").innerText=" : "+timer.time+"s";
				if (timer.time == 0 || end == true) {
					clearInterval(timer.id);
					timer.id=null;
					timer.online=false;
					document.getElementById("timer").innerText="";
				}
			}
			function askLaunch() {
				if (mode=="VOTE" && !vote_for) {return;}
				$.post(url+"ask_launch",{id:player.id,password:player.password}, function (data, status){
						if (status == "success") {
							document.getElementById("btn_launch").disabled=true;
						}		
				});
				
			}
			function sendCards() {
				console.log(player.cards_played);
				$.post(url+"send_cards",{id:player.id,password:player.password,cards_played:player.cards_played}, function (data, status){
						if (status == "success") {
							player = data;
							deleteCards();
							for (card in player.cards) {
									addCard(player.cards[card]);
								}
								
						}		
				});
			}


			function stop() {
				if (timer_update) {clearInterval(tick);
					timer_update=null;
					document.getElementById("btn").innerText="Allumer";
					console.log("éteint");}
				else {tick = setInterval(function(){update();}, 2000);timer_update=true;console.log("allumé");document.getElementById("btn").innerText="Eteindre";}
			}
			document.addEventListener("touchstart", touchHandler);
			document.addEventListener("touchmove", touchHandler);
			document.addEventListener("touchend", touchHandler);
			window.addEventListener('blur', function (e) {
				endDnD();
			});
			window.addEventListener('beforeunload', quit); 

			register(prompt("Entrez votre pseudo", ""));


			timer_update=true;



			tick = setInterval(function(){
				
				update();
				
			}, 2000);

			setTimeout(function () {
				//more code
			},2000);






		
		
		</script>
</html>

